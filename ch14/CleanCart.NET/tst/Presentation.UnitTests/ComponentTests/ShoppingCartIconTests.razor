@using Application.Operations.UseCases.AccessCustomerData
@using MediatR
@using Presentation.BSA.Services
@inherits TestContext

@code {
    private readonly Mock<IAuthenticationService> _authenticationServiceMock;
    private readonly Mock<IMediator> _mediator;
    private readonly ShoppingCartState _shoppingCartState;

    public ShoppingCartIconTests()
    {
        SetupJSInterop();

        _authenticationServiceMock = new Mock<IAuthenticationService>();
        _mediator = new Mock<IMediator>();
        _shoppingCartState = new ShoppingCartState();

        Services.AddScoped(_ => _authenticationServiceMock.Object);
        Services.AddScoped(_ => _mediator.Object);
        Services.AddScoped(_ => _shoppingCartState);
        Services.AddMudBlazorDialog();
        Services.AddMudBlazorSnackbar();
        Services.AddMudServices();
    }

    private void SetupJSInterop()
    {
        // Setup JSInterop to handle the specific JS calls made by MudBlazor components
        JSInterop.SetupVoid("mudPopover.initialize", _ => true);
    }

    [Fact]
    public void ShoppingCartIcon_WhenCartIsEmpty_ShouldRenderEmptyCartIcon()
    {
        // Arrange
        var user = new User("username@example.com", "username@example.com", "Test User", new List<UserRole>());
        _authenticationServiceMock.Setup(auth => auth.GetCurrentUserAsync()).ReturnsAsync(user);

        var cart = new ShoppingCart(user.Id);
        _mediator.Setup(m => m.Send(It.IsAny<AccessCustomerShoppingCartQuery>(), It.IsAny<CancellationToken>())).ReturnsAsync(cart);

        // Act
        var cut = RenderComponent<ShoppingCartIcon>();

        // Wait for state change indicating the cart items have been loaded and UI has updated
        cut.WaitForState(() => cut.FindComponent<MudBadge>().Instance.Content?.ToString() == cart.Items.Count.ToString());

        // Assert
        var badge = cut.FindComponent<MudBadge>();
        Assert.NotNull(badge.Instance.Content);
        Assert.Equal(cart.Items.Count.ToString(), badge.Instance.Content.ToString());
    }

    [Fact]
    public void ShoppingCartIcon_WhenCartHasItems_ShouldRenderBadgeWithItemCount()
    {
        // Arrange
        var user = new User("username@example.com", "username@example.com", "Test User", new List<UserRole>());
        _authenticationServiceMock.Setup(auth => auth.GetCurrentUserAsync()).ReturnsAsync(user);

        var product1 = new Product(Guid.NewGuid(), "Product 1", 10.00m, 10, "image.png");
        var product2 = new Product(Guid.NewGuid(), "Product 2", 20.00m, 10, "image.png");
        var cart = new ShoppingCart(user.Id);
        cart.AddItem(product1, 5);
        cart.AddItem(product2, 5);
        _mediator.Setup(m => m.Send(It.IsAny<AccessCustomerShoppingCartQuery>(), It.IsAny<CancellationToken>())).ReturnsAsync(cart);

        // Act
        var cut = RenderComponent<ShoppingCartIcon>();

        // Wait for state change indicating the cart items have been loaded and UI has updated
        cut.WaitForState(() => cut.FindComponent<MudBadge>().Instance.Content?.ToString() == cart.Items.Count.ToString());

        // Assert
        var badge = cut.FindComponent<MudBadge>();
        Assert.NotNull(badge.Instance.Content);
        Assert.Equal(cart.Items.Count.ToString(), badge.Instance.Content.ToString());
    }
}
